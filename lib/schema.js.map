{"version":3,"sources":["../src/schema.js"],"names":["Schema","dynamoose","schema","id","type","String","hashKey","required","default","model","validate","v","m","yup","string","isValidSync","email","lowercase","name","password","active","Boolean","boolean","createdAt","Date","toISOString","updatedAt"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAM;AAAEA,EAAAA;AAAF,IAAaC,kBAAnB;AAEA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW;AACxBG,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,OAAO,EAAE,IAFP;AAGFC,IAAAA,QAAQ,EAAE,IAHR;;AAIFC,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,aAAO,iBAAP;AACD,KANC;;AAOFC,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CAACC,MAAJ,GAAaC,WAAb,CAAyBJ,CAAzB,CAAP;AACD;;AATC,GADoB;AAYxBK,EAAAA,KAAK,EAAE;AACLZ,IAAAA,IAAI,EAAEC,MADD;AAELE,IAAAA,QAAQ,EAAE,IAFL;AAGLU,IAAAA,SAAS,EAAE,IAHN;;AAILP,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CACPC,MADI,GAEJE,KAFI,GAGJD,WAHI,CAGQJ,CAHR,CAAP;AAID;;AATI,GAZiB;AAuBxBO,EAAAA,IAAI,EAAE;AACJd,IAAAA,IAAI,EAAEC,MADF;AAEJE,IAAAA,QAAQ,EAAE,IAFN;;AAGJG,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CACPC,MADI,GAEJC,WAFI,CAEQJ,CAFR,CAAP;AAGD;;AAPG,GAvBkB;AAgCxBQ,EAAAA,QAAQ,EAAE;AACRf,IAAAA,IAAI,EAAEC,MADE;AAERE,IAAAA,QAAQ,EAAE,IAFF;;AAGRG,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CACPC,MADI,GAEJC,WAFI,CAEQJ,CAFR,CAAP;AAGD;;AAPO,GAhCc;AAyCxBS,EAAAA,MAAM,EAAE;AACNhB,IAAAA,IAAI,EAAEiB,OADA;AAENb,IAAAA,OAAO,EAAE,IAFH;;AAGNE,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CAACS,OAAJ,GAAcP,WAAd,CAA0BJ,CAA1B,CAAP;AACD;;AALK,GAzCgB;AAgDxBY,EAAAA,SAAS,EAAE;AACTnB,IAAAA,IAAI,EAAEC,MADG;;AAETG,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,aAAO,IAAIe,IAAJ,GAAWC,WAAX,EAAP;AACD,KAJQ;;AAKTf,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CAACC,MAAJ,GAAaC,WAAb,CAAyBJ,CAAzB,CAAP;AACD;;AAPQ,GAhDa;AAyDxBe,EAAAA,SAAS,EAAE;AACTtB,IAAAA,IAAI,EAAEC,MADG;;AAETG,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,aAAO,IAAIe,IAAJ,GAAWC,WAAX,EAAP;AACD,KAJQ;;AAKTf,IAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACb,aAAOC,GAAG,CAACC,MAAJ,GAAaC,WAAb,CAAyBJ,CAAzB,CAAP;AACD;;AAPQ;AAzDa,CAAX,CAAf;eAoEeT,M","sourcesContent":["import v4 from 'uuid/v4'\r\nimport dynamoose from 'dynamoose'\r\nimport * as yup from 'yup'\r\n\r\nconst { Schema } = dynamoose\r\n\r\nconst schema = new Schema({\r\n  id: {\r\n    type: String,\r\n    hashKey: true,\r\n    required: true,\r\n    default(model) {\r\n      return v4()\r\n    },\r\n    validate(v, m) {\r\n      return yup.string().isValidSync(v)\r\n    },\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    lowercase: true,\r\n    validate(v, m) {\r\n      return yup\r\n        .string()\r\n        .email()\r\n        .isValidSync(v)\r\n    },\r\n  },\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n    validate(v, m) {\r\n      return yup\r\n        .string()\r\n        .isValidSync(v)\r\n    },\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n    validate(v, m) {\r\n      return yup\r\n        .string()\r\n        .isValidSync(v)\r\n    },\r\n  },\r\n  active: {\r\n    type: Boolean,\r\n    default: true,\r\n    validate(v, m) {\r\n      return yup.boolean().isValidSync(v)\r\n    },\r\n  },\r\n  createdAt: {\r\n    type: String,\r\n    default(model) {\r\n      return new Date().toISOString()\r\n    },\r\n    validate(v, m) {\r\n      return yup.string().isValidSync(v)\r\n    },\r\n  },\r\n  updatedAt: {\r\n    type: String,\r\n    default(model) {\r\n      return new Date().toISOString()\r\n    },\r\n    validate(v, m) {\r\n      return yup.string().isValidSync(v)\r\n    },\r\n  },\r\n})\r\n\r\nexport default schema\r\n"],"file":"schema.js"}