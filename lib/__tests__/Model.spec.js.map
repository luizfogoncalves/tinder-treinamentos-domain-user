{"version":3,"sources":["../../src/__tests__/Model.spec.js"],"names":["testUsers","testEnpoints","beforeAll","endpoint","EndpointModel","scan","exec","describe","it","user","Model","expect","toBeDefined","email","active","not","toHaveProperty","save","push","err","addEndpoint","id","removeEndpoint","users","length","toBeGreaterThanOrEqual","get","contractId","addContract","contracts","toHaveLength","toEqual","isValidContract","validContractById","afterAll","Promise","all","map","item","delete"],"mappings":"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","sourcesContent":["import Model from '../Model'\r\nimport { EndpointModel } from '@rota95/domain-endpoint'\r\nimport v4 from 'uuid/v4'\r\n\r\nconst testUsers = []\r\nlet testEnpoints = []\r\n\r\nbeforeAll(async () => {\r\n  const endpoint = await EndpointModel.scan().exec()\r\n  testEnpoints = [...endpoint]\r\n})\r\n\r\ndescribe('Users', () => {\r\n  it('should create class without properties', () => {\r\n    const user = new Model()\r\n\r\n    expect(user).toBeDefined()\r\n  })\r\n\r\n  it('should create class define properties', () => {\r\n    const user = new Model({ email: 'teste@email.com', active: true })\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).not.toHaveProperty('id')\r\n    expect(user).not.toHaveProperty('endpoints')\r\n    expect(user).toHaveProperty('active')\r\n    expect(user).toHaveProperty('email')\r\n    expect(user).not.toHaveProperty('createdAt')\r\n    expect(user).not.toHaveProperty('updatedAt')\r\n  })\r\n\r\n  it('should save user with email wrong', async () => {\r\n    const user = new Model({ email: 'teste' })\r\n    try {\r\n      await user.save()\r\n      testUsers.push(user)\r\n    } catch (err) {\r\n      expect(err).toBeDefined()\r\n    }\r\n  })\r\n\r\n  it('should save user without email', async () => {\r\n    const user = new Model({ email: 'teste' })\r\n    try {\r\n      await user.save()\r\n      testUsers.push(user)\r\n    } catch (err) {\r\n      expect(err).toBeDefined()\r\n    }\r\n  })\r\n\r\n  it('should save user and add endpoint', async () => {\r\n    const user = new Model({ email: 'teste@email.com', active: true })\r\n\r\n    await user.save()\r\n\r\n    user.addEndpoint(testEnpoints[0].id)\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('id')\r\n    expect(user).toHaveProperty('email')\r\n    expect(user).toHaveProperty('endpoints')\r\n    expect(user).toHaveProperty('active')\r\n    expect(user).toHaveProperty('createdAt')\r\n    expect(user).toHaveProperty('updatedAt')\r\n  })\r\n\r\n  it('should save user and remove endpoint', async () => {\r\n    const user = new Model({ email: 'teste2@email.com' })\r\n\r\n    await user.save()\r\n\r\n    user.addEndpoint(testEnpoints[0].id)\r\n\r\n    user.removeEndpoint(testEnpoints[0].id)\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('id')\r\n    expect(user).toHaveProperty('email')\r\n    expect(user).toHaveProperty('endpoints')\r\n    expect(user).toHaveProperty('active')\r\n    expect(user).toHaveProperty('createdAt')\r\n    expect(user).toHaveProperty('updatedAt')\r\n  })\r\n\r\n  it('should list users', async () => {\r\n    const users = await Model.scan().exec()\r\n\r\n    expect(users).toBeDefined()\r\n    expect(users.length).toBeGreaterThanOrEqual(1)\r\n  })\r\n\r\n  it('should get user by id', async () => {\r\n    const id = testUsers[0].id\r\n\r\n    const user = await Model.get({ id })\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('id')\r\n    expect(user).toHaveProperty('email')\r\n    expect(user).toHaveProperty('endpoints')\r\n    expect(user).toHaveProperty('active')\r\n    expect(user).toHaveProperty('createdAt')\r\n    expect(user).toHaveProperty('updatedAt')\r\n  })\r\n\r\n  it('should exist contracts property', async () => {\r\n    const user = new Model({ email: 'teste2@email.com' })\r\n\r\n    await user.save()\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('id')\r\n    expect(user).toHaveProperty('email')\r\n    expect(user).toHaveProperty('endpoints')\r\n    expect(user).toHaveProperty('active')\r\n    expect(user).toHaveProperty('contracts')\r\n    expect(user).toHaveProperty('createdAt')\r\n    expect(user).toHaveProperty('updatedAt')\r\n  })\r\n\r\n  it('should add contract by method addContract', async () => {\r\n    const user = new Model({ email: 'teste2@email.com' })\r\n\r\n    await user.save()\r\n\r\n    const contractId = v4()\r\n\r\n    user.addContract(contractId)\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('contracts')\r\n    expect(user.contracts).toHaveLength(1)\r\n    expect(user.contracts[0]).toEqual(contractId)\r\n  })\r\n\r\n  it('should add contract by method validContractById', async () => {\r\n    const user = new Model({ email: 'teste2@email.com' })\r\n\r\n    await user.save()\r\n\r\n    const contractId = v4()\r\n\r\n    user.addContract(contractId)\r\n\r\n    const isValidContract = user.validContractById(contractId)\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('contracts')\r\n    expect(user.contracts).toHaveLength(1)\r\n    expect(user.contracts[0]).toEqual(contractId)\r\n    expect(isValidContract).toEqual(true)\r\n  })\r\n\r\n  it('should add contract by method validContractById pass invalid ContractId', async () => {\r\n    const user = new Model({ email: 'teste2@email.com' })\r\n\r\n    await user.save()\r\n\r\n    const contractId = v4()\r\n\r\n    user.addContract(contractId)\r\n\r\n    const isValidContract = user.validContractById(v4())\r\n\r\n    testUsers.push(user)\r\n\r\n    expect(user).toBeDefined()\r\n    expect(user).toHaveProperty('contracts')\r\n    expect(user.contracts).toHaveLength(1)\r\n    expect(user.contracts[0]).toEqual(contractId)\r\n    expect(isValidContract).toEqual(false)\r\n  })\r\n})\r\n\r\nafterAll(async () => {\r\n  await Promise.all(\r\n    testUsers.map(item => {\r\n      return Model.delete(item)\r\n    })\r\n  )\r\n})\r\n"],"file":"Model.spec.js"}